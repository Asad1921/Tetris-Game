#include<iostream>
#include<windows.h>
using namespace std;
#include<conio.h>
#include<math.h>
#include <stdlib.h>
#include <fstream>
#include <ctime>
void gotoRowCol(int rpos, int cpos)
{
int xpos=cpos, ypos = rpos;
COORD scrn;
HANDLE hOuput = GetStdHandle(STD_OUTPUT_HANDLE);
scrn.X = cpos;
scrn.Y = rpos;
SetConsoleCursorPosition(hOuput, scrn);
}
void sleep(int m)
{
 for(int j=0;j<m*21000;j++)
 {
 }
}
void structure()
{
    char block=219;
    for(int i=0;i<=30;i++)
        {
        gotoRowCol(2+i,58);
        cout<<"<!";
    }
    for(int i=0;i<=30;i++)
     {
        gotoRowCol(3+i,84);
        cout<<"!>";
    }
    for(int i=0;i<=26;i++)
     {
        gotoRowCol(33,58+i);
        cout<<"||";
    }
    for(int i=0;i<=26;i++)
     {
        gotoRowCol(2,58+i);
        cout<<"||";
    }
     char b=177;

    for(int i=0;i<58;i++)
    {
        gotoRowCol(34,51+i);
        cout<<b;
    }

    for(int i=0;i<5;i++)
    {
        for(int j=0;j<16;j++)
        {
           if(i==0 || i==4 || j==0 || j==15)
           {
                gotoRowCol(28+i,93+j);
               cout<<b;
           }
           else
           {
               cout<<" ";
           }
        }
    }
}
int Z_shape[4][4]= {
    {1,1,0,0},
    {0,1,1,0},
    {0,0,0,0},
    {0,0,0,0}};

int L_shape[4][4]={
    {1,0,0,0},
    {1,1,1,0},
    {0,0,0,0},
    {0,0,0,0}};
int J_shape[4][4]= {
    {0,0,1,0},
    {1,1,1,0},
    {0,0,0,0},
    {0,0,0,0}};

int I_shape[4][4]= {
    {1,1,1,1},
    {0,0,0,0},
    {0,0,0,0},
    {0,0,0,0}};
int T_shape[4][4]= {
    {1,1,1,0},
    {0,1,0,0},
    {0,0,0,0},
    {0,0,0,0}};
int O_shape[4][4]= {
    {1,1,0,0},
    {1,1,0,0},
    {0,0,0,0},
    {0,0,0,0}};

int S_shape[4][4]={
    {0,1,1,0},
    {1,1,0,0},
    {0,0,0,0},
    {0,0,0,0}};


    int board[30][12]={
    {0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0}};

int score = 0;
void drawBoard()
{

    char block=177;
    for(int i=0;i<30;i++)
        {

        for(int j=0;j<12;j++)
        {
            gotoRowCol(i+3,j*2+60);
            if(board[i][j]==1)
             {
                cout<<"[]";
            }
            else
                {
                cout<<"  ";
            }

        }
    }
    gotoRowCol(30,95);
    cout<<"My Score:"<<score<<endl;
}

bool Collision(int shape[4][4],int x,int y)
 {
    for(int i=0;i<4;i++)
        {
        for(int j=0;j<4;j++)
         {
            if((y+i>=30||x+j<0||x+j>=12||board[y+i][x+j]==1)&&shape[i][j]==1)
             {
                return true;
            }
        }
    }
    return false;
}

void enter(int shape[4][4],int x,int y)
 {
    for(int i=0;i<4;i++)
        {
        for(int j=0;j<4;j++)
         {
            if(shape[i][j]==1)
             {
                board[y+i][x+j]=1;
            }
        }
    }
}

void remove_line()
{
    int removed_lines=0;
    for(int i=0;i<30;i++)
        {
        bool fullLine=true;
        for(int j=0;j<12;j++)
         {
            if(board[i][j]==0)
            {
                fullLine=false;
                break;
            }
        }
        if(fullLine)
        {
            removed_lines++;
            for(int m=i;m>0;m--)
            {
                for(int l=0;l<12;l++)
                {
                    board[m][l]=board[m-1][l];
                }
            }
            for(int l=0;l<12;l++)
             {
                board[0][l]=0;
            }
        }
    }

    if(removed_lines>0)
        {
        score+=(removed_lines*10);
    }
}

void save(int shape[4][4],int x,int y)
 {
    ofstream save("tetris_game.txt");
    save<<score<<endl;
    for(int i=0;i<30;i++)
        {
        for(int j=0;j<12;j++)
        {
            save<<board[i][j]<<" ";
        }
        save<<endl;
    }
    save<<x<<" "<<y<<endl;
    for(int i=0;i<4;i++)
     {
        for(int j=0;j<4;j++)
        {
            save<<shape[i][j]<<" ";
        }
        save<<endl;
    }
    gotoRowCol(21,9);
    cout<<"Game is saved!"<<endl;
    gotoRowCol(22,9);
    cout<<"<><><><><><><><><>";
}

void load(int &score,int shape[4][4],int &x,int &y)
 {
    ifstream save("tetris_game.txt");
    save>>score;
    for(int i=0;i<30;i++)
        {
        for(int j=0;j<12;j++)
         {
            save>>board[i][j];
        }
    }
    save>>x>>y;
    for(int i=0;i<4;i++)
     {
        for(int j=0;j<4;j++)
        {
            save>>shape[i][j];
        }
    }
    gotoRowCol(21,9);
    cout<<"Game loaded!"<<endl;
}

void run(int shape[4][4],int x,int y)
 {
    for(int i=0;i<4;i++)
        {
        for(int j=0;j<4;j++)
         {
            if(shape[i][j]==1)
            {
                board[y+i][x+j]=0;
            }
        }
    }
}
int random_tetromino(int shape[4][4])
 {
    int choice=rand()%7;
    switch(choice)
    {
        case 0:
            for(int i=0;i<4;i++)
            for(int j=0;j<4;j++)
                shape[i][j]=I_shape[i][j];
            break;
        case 1:
            for(int i=0;i<4;i++)
            for(int j=0;j<4;j++)
                shape[i][j]=O_shape[i][j];
            break;
        case 2:
            for(int i=0;i<4;i++)
            for(int j=0;j<4;j++)
            shape[i][j]=T_shape[i][j];
            break;
        case 3:
            for(int i=0;i<4;i++)
            for(int j=0;j<4;j++)
            shape[i][j]=S_shape[i][j];
            break;
        case 4:
            for(int i=0;i<4;i++)
            for(int j=0;j<4;j++)
                    shape[i][j]=L_shape[i][j];
            break;
        case 5:
            for(int i=0;i<4;i++)
            for(int j=0;j<4;j++)
                shape[i][j]=Z_shape[i][j];
            break;
        case 6:
            for(int i=0;i<4;i++)

            for(int j=0;j<4;j++)
                    shape[i][j]=J_shape[i][j];
            break;
    }
    return choice;
}
void rotate_shape(int shape[4][4])
{
    int new_shape[4][4];
    for(int i=0;i<4;i++)
        {
        for(int j=0;j<4;j++)
         {
            new_shape[i][j]=shape[j][3 - i];
        }
    }
    for(int i=0;i<4;i++)
    {
        for(int j=0;j<4;j++)
        {
            shape[i][j]=new_shape[i][j];
        }
    }
}



void game_play(string name,int &x,int &y,int shape[4][4])
{
    bool gamerun=true;
    bool stop=false;
        while(gamerun)
{
      if(!stop)
        {
         run(shape,x,y);

        if(_kbhit())
            {
            char ch=_getch();
            if(ch==224)
                 {
                ch=_getch();
                 }
            int t_Shape[4][4];
            int t_x =x;
            int t_y =y;
            for(int i=0;i<4;i++)
                 {
                for(int j=0;j<4;j++)
                 {
                    t_Shape[i][j]=shape[i][j];
                }
            }
            if(ch==75)
                {
                t_x--;
                t_y--;
            }
            else if(ch==77)
                {
                t_x++;
                t_y--;
            }
            else if(ch==80)
                {
                t_y+=4;
            }

            else if(ch==72)
                {
                rotate_shape(t_Shape);
                 t_y--;
            }
            else if(ch=='t'||ch=='T')
                {
                save(shape,x,y);
            }

            else if(ch=='s' || ch=='S')
                {
                    stop=true;
                }
                else if(ch=='q' || ch=='Q')
            {
            gamerun= false;
            gotoRowCol(25, 15);
            cout<<"Game Over."<<endl;

            }
            if(!Collision(t_Shape,t_x,t_y))
            {
                x=t_x;
                y=t_y;
                for(int i=0;i<4;i++)
                    {
                    for(int j=0;j<4;j++)
                     {
                        shape[i][j]=t_Shape[i][j];

                    }
                }
            }


        }
         int t_y=y+1;
        if(Collision(shape,x,t_y))
            {
            enter(shape,x,y);
            remove_line();
           random_tetromino(shape);
            x=rand()%5;
            y=0;
            if(Collision(shape,x,y))
                {
                gotoRowCol(25,15);
                cout<<"Game Over."<<endl;
                gotoRowCol(26,15);
                cout<<"==========\n\n\n\n"<<endl;;
                 gotoRowCol(27,15);
                 cout<<name<<" Got : "<<score<<" Score\n\n\n\n\n";
                break;
            }
        }
         else
            {
            y++;
        }
        enter(shape,x,y);
        drawBoard();
        Sleep(100);
        }


        else
       {
    gotoRowCol(21, 9);
    cout<<"Game Paused. Press 'C' to Continue."<<endl;

    if (_kbhit())
    {
        char ch = _getch();
        if (ch=='c' || ch=='C')
        {
            stop= false;
        }
        if(ch=='q')
        {
            gamerun= false;
            gotoRowCol(25, 15);
            cout<<"Game Over."<<endl;
        }
    }
}
}
}

void instruction(){

    char b=177;
     for(int i=0;i<13;i++)
    {
        for(int j=0;j<16;j++)
        {
           if(i==0 || i==12 || j==0 || j==15)
           {
                gotoRowCol(13+i,93+j);
               cout<<b;
           }
           else
           {
               cout<<" ";
           }
        }
    }
    gotoRowCol(15,95);
    cout<<"Press :";
     gotoRowCol(17,95);
    cout<<"T For Save";
     gotoRowCol(19,95);
    cout<<"S For Stop";
     gotoRowCol(21,95);
    cout<<"C For Cntnue";
     gotoRowCol(23,95);
    cout<<"Q For Quit";
}

int main()
          {
    srand(time(0));
    structure();
    instruction();

    int x=rand()%5;
    int y=0;
    int shape[4][4];
    random_tetromino(shape);
    char op;
    string name;
    gotoRowCol(13,2);
    cout <<"Enter Your Name : ";

    cin>>name;
    gotoRowCol(15,2);
    cout<<"For Loading a saved Game Press [y] otherwise [n] :";
    cin>>op;
    if(op=='y'||op=='Y')
        {
            load(score,shape,x,y);
    }
    game_play(name,x,y,shape);
    return 0;
}
